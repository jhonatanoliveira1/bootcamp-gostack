const express = require('express'); //Comportando o express dentro de uma vari√°vel 
const { uuid, isUuid } = require('uuidv4'); // uiid: identificador √∫nico universal isUuid: verificar se o id e valido ou n√£o

const app = express(); //Declarando uma vari√°vel que e igual a express

app.use(express.json()); //Adiciona uma rota que todas as fun√ßoes v√£o passar

/**
 * M√©todos HTTP
 * 
 * - GET: Buscar informa√ß√µes do back-end
 * - POST: Criar uma informa√ß√£o no back-end
 * - PUT/PATH: Alterar uma informa√ß√£o no back-end
 *    - PUT: Utilizado para alterar varias informa√ß√µes
 *    - PATH: Utilizado para alter informa√ß√µes espec√≠ficas
 * - DELETE: Deletar uma informa√ß√£o no back-end
 */

/**
 * Tipos de Par√¢metros
 * 
 * - Query Params: Filtros e pagina√ß√£o
 * - Route Params: Identificar recursos (Atualizar/Deletar)
 * - Request Body: Conte√∫do na hora de criar ou editar um recurso (JSON)
 */

/**
 * Middlewares
 * 
 * - Interceptador de requisi√ß√µes que pode interromper totalmente a requisi√ß√£o ou alterar dados da requisi√ß√£o
 */

const projects = [];

function logRequests(request, response, next) { //Middlewares sempre recebe par√¢metros req e res, podendo ter outros par√¢metros logo a seguir
  const { method, url } = request;

  const logLabel = `[${method.toUpperCase()}] ${url}`;

  console.time(logLabel);

  next(); //Pr√≥ximo middleware

  console.timeEnd(logLabel);
};

function validateProjectId(request, response, next) {
  const { id } = request.params;

  if (!isUuid(id)) {
    return response.status(400).json({ error: 'Ivanlid project ID.' }); //O pr√≥ximo passo n√£o sera executado se o id n√£o for valido
  }

  return next();
}

app.use(logRequests);
app.use('/projects/:id', validateProjectId); //Aplica apenas nas rotas com esse mesmo caminho

app.get('/projects', (request, response) => { //Metodo get que recebe dois par√¢metros.
  //Um endre√ßo, podendo ser '/' e o recurso que usu√°rio quer acessar '/projects'.
  //E uma fun√ß√£o que recebe dois par√¢metros req e res.
  //response permite retornar resposta ao usu√°rio e request guarda requisi√ß√£o do usu√°rio.

  const { title } = request.query;

  const results = title //Ver se o t√≠tulo do usuario foi preenchido
    ? projects.filter(project => project.title.includes(title)) //Verifica se no title do project inclui a palavra filtrada em title
    : projects;

  return response.json(results); //json deve sempre retornado em array [] ou objeto {}    
});

app.post('/projects', (request, response) => {
  const { title, owner } = request.body;

  const project = { id: uuid(), title, owner };

  projects.push(project)
  
  return response.json(project);
});

app.put('/projects/:id', (request, response) => { //Para alterar utilizamos um id
  const { id } = request.params;
  const { title, owner } = request.body;

  const projectIndex = projects.findIndex(project => //findIndex procura a possi√ß√£o do objeto
    project.id === id
  );

  if(projectIndex < 0) { //verifica√ß√£o
    return response.status(400).json({ error: 'Project not found.'});
  };

  const project = {
    id,
    title,
    owner,
  };

  projects[projectIndex] = project; //Substitui o valor que esta armazenado dentro da posi√ß√£o projectIndex
  
  return response.json(project); //Retorna o objeto atualizado
});

app.delete('/projects/:id', (request, response) => { //Para deletar utilizamos um id
  const { id } = request.params;

  const projectIndex = projects.findIndex(project => //findIndex procura a possi√ß√£o do objeto
    project.id === id
  );

  if(projectIndex < 0) { //verifica√ß√£o
    return response.status(400).json({ error: 'Project not found.'});
  };

  projects.splice(projectIndex, 1); //splice retira uma informa√ß√£o dentro do array 

  return response.status(204).send(); //retonar em branco
});

app.listen(3333, () => { //adiciona uma porta, podemos escolher qualquer porta acima da porta 80.
  //Como segundo par√¢metro, adicionamos um fun√ß√£o autom√°tica que mostra quando o servidor estiver no ar
  console.log('üöÄÔ∏è Back-end started!');
}); 